apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}-app
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: app
spec:
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: app
  strategy:
    type: Recreate
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: app
    spec:
      {{- include "jisort.imagePullSecrets" . | nindent 6 }}
      volumes:
        - name: fineract-data
          persistentVolumeClaim:
            claimName: {{ include "common.names.fullname" . }}-data
      initContainers:
        - name: check-db
          image: busybox:1.28
          command:
            [
              "sh",
              "-c",
              'echo -e "Checking for availability of MySQL server deployment"; while ! nc -z {{ include "database.host" . }} {{ include "database.port" . }}; do sleep 1; printf "-"; done; echo -e " >> MySQL server has started";',
            ]
        - name: init-db
          image: litmuschaos/mysql-client:latest
          command:
            [
              "sh",
              "-c",
              'mysql -u root -e "CREATE DATABASE IF NOT EXISTS {{ include `tenant.databaseName` . }}; GRANT ALL PRIVILEGES ON {{ include `tenant.databaseName` . }}.* TO ''{{ include `database.username` . }}''@''%''; FLUSH PRIVILEGES;"',
            ]
          env:
            - name: MYSQL_HOST
              value: {{ include "database.host" . | quote }}
            - name: MYSQL_TCP_PORT
              value: {{ include "database.port" . | quote }}
            - name: MYSQL_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ include "database.secretName" . }}
                  key: {{ include "database.secretKeyRoot" . }}
        - name: volume-permissions
          image: busybox
          command:
            - /bin/sh
          args:
            - '-c'
            - chmod -R 755 /data && chown 1001:1001 /data
          resources: { }
          volumeMounts:
            - name: fineract-data
              mountPath: /data
      containers:
        - name: fs-{{ include "common.names.fullname" . }}
          image: "{{ .Values.server.image.name }}:{{ .Values.server.image.tag }}"
          resources: {{- toYaml .Values.server.resources | nindent 12 }}
          volumeMounts:
            - name: fineract-data
              mountPath: /data
          ports:
            - containerPort: {{ .Values.server.port }}
              name: server
          env:
            - name: FINERACT_NODE_ID
              value: "1"
            - name: FINERACT_HIKARI_DRIVER_SOURCE_CLASS_NAME
              value: {{ include "hikari.jdbcDriver" . | quote }}
            - name: FINERACT_HIKARI_JDBC_URL
              value: {{ include "hikari.jdbcUrl" . | quote }}
            - name: FINERACT_HIKARI_USERNAME
              value: {{ include "database.username" . | quote }}
            - name: FINERACT_HIKARI_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "database.secretName" . }}
                  key: {{ include "database.secretKey" . }}
            - name: FINERACT_DEFAULT_TENANTDB_HOSTNAME
              value: {{ include "database.host" . | quote }}
            - name: FINERACT_DEFAULT_TENANTDB_PORT
              value: {{ include "database.port" . | quote }}
            - name: FINERACT_DEFAULT_TENANTDB_UID
              value: {{ include "database.username" . | quote }}
            - name: FINERACT_DEFAULT_TENANTDB_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ include "database.secretName" . }}
                  key: {{ include "database.secretKey" . }}
            - name: FINERACT_DEFAULT_TENANTDB_CONN_PARAMS
              value: {{ .Values.tenant.connectionParams }}
            - name: FINERACT_SERVER_SSL_ENABLED
              value: {{ .Values.server.ssl.enabled | quote }}
            - name: FINERACT_SERVER_PORT
              value: {{ .Values.server.port | quote }}
            - name: FINERACT_DEFAULT_TENANTDB_TIMEZONE
              value: {{ .Values.tenant.timezone }}
            - name: FINERACT_DEFAULT_TENANTDB_IDENTIFIER
              value: 'default'
            - name: FINERACT_DEFAULT_TENANTDB_NAME
              value: {{ include "tenant.databaseName" . }}
            - name: FINERACT_DEFAULT_TENANTDB_DESCRIPTION
              value: {{ .Values.tenant.name }}
            - name: JAVA_TOOL_OPTIONS
              value: "-Xmx1G -javaagent:{{ .Values.elasticApm.agentPath }} -Delastic.apm.application_packages={{ .Values.elasticApm.applicationPackages }} -Delastic.apm.trace_methods={{ .Values.elasticApm.traceMethods }}"
            - name: FINERACT_CONTENT_FILESYSTEM_ROOT_FOLDER
              value: /data
            - name: FINERACT_PENTAHO_REPORTS_PATH
              value: /app/pentahoReports
            - name: ELASTIC_APM_AGENT_PATH
              value: {{ .Values.elasticApm.agentPath }}
            - name: ELASTIC_APM_SERVER_URL
              value: {{ .Values.elasticApm.serverUrl }}
            - name: ELASTIC_APM_SERVICE_NAME
              value: {{ include "common.names.fullname" . }}
            - name: ELASTIC_APM_ENVIRONMENT
              value: {{ .Values.elasticApm.environment }}

              
            
          startupProbe:
            httpGet:
              path: /fineract-provider/actuator/health/liveness
              port: {{ .Values.server.port }}
              scheme: {{ include "server.protocol" . }}
            failureThreshold: 60
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /fineract-provider/actuator/health/liveness
              port: {{ .Values.server.port }}
              scheme: {{ include "server.protocol" . }}
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /fineract-provider/actuator/health/liveness
              port: {{ .Values.server.port }}
              scheme: {{ include "server.protocol" . }}
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 6
          securityContext:
            runAsUser: 1001
            runAsNonRoot: true
        - name: fw-{{ include "common.names.fullname" . }}
          image: "{{ .Values.client.image.name }}:{{ .Values.client.image.tag }}"
          resources: {{- toYaml .Values.client.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 6
          ports:
            - containerPort: 80
              name: web
        - name: self-service-{{ include "common.names.fullname" . }}
          image: "{{ .Values.selfService.image.name }}:{{ .Values.selfService.image.tag }}"
          resources: {{- toYaml .Values.selfService.resources | nindent 12 }}
          ports:
            - containerPort: {{ .Values.selfService.port }}
              name: self-service
          livenessProbe:
            httpGet:
              path: {{ .Values.selfService.basePath }}/
              port: {{ .Values.selfService.port }}
            initialDelaySeconds: {{ .Values.selfService.probes.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.selfService.probes.timeoutSeconds }}
            periodSeconds: {{ .Values.selfService.probes.periodSeconds }}
            successThreshold: {{ .Values.selfService.probes.successThreshold }}
            failureThreshold: {{ .Values.selfService.probes.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.selfService.basePath }}/
              port: {{ .Values.selfService.port }}
            initialDelaySeconds: {{ .Values.selfService.probes.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.selfService.probes.timeoutSeconds }}
            periodSeconds: {{ .Values.selfService.probes.periodSeconds }}
            successThreshold: {{ .Values.selfService.probes.successThreshold }}
            failureThreshold: {{ .Values.selfService.probes.failureThreshold }}
